name: ETF Daily Analysis - Modular System

on:
  schedule:
    # 每天台灣時間 15:30 執行 (UTC+8 = UTC 07:30)
    - cron: '30 7 * * 1-5'
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: '分析模式'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - quick  
        - dashboard_only

env:
  FIREBASE_URL: ${{ secrets.FIREBASE_URL }}

jobs:
  etf_analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas numpy lxml beautifulsoup4
        
    - name: 🧪 Quick module test
      run: |
        cd scripts
        python -c "
        import sys
        sys.path.append('.')
        
        print('📦 測試模組導入...')
        
        try:
            from config.etf_config import ETF_INFO, ETF_LIST
            print('✅ 配置模組導入成功')
        except Exception as e:
            print(f'❌ 配置模組失敗: {e}')
            
        try:
            from core.firebase_client import FirebaseClient
            print('✅ Firebase客戶端導入成功')
        except Exception as e:
            print(f'❌ Firebase客戶端失敗: {e}')
            
        try:
            from core.dividend_collector import DividendDateCollector
            print('✅ 除息收集器導入成功')
        except Exception as e:
            print(f'❌ 除息收集器失敗: {e}')
            
        print('🎯 模組測試完成')
        "
        
    - name: 🎯 Run ETF Analysis
      if: github.event.inputs.analysis_mode != 'dashboard_only'
      timeout-minutes: 10
      run: |
        cd scripts
        echo "🚀 開始執行ETF分析..."
        echo "📊 分析模式: ${{ github.event.inputs.analysis_mode || 'full' }}"
        
        python main_analyzer.py
        
    - name: 🎨 Generate Dashboard
      if: success()
      run: |
        cd scripts
        echo "🎨 生成儀表板..."
        python generate_dashboard.py
        
    - name: 📊 Verify Firebase Data
      if: success()
      run: |
        cd scripts
        python -c "
        import sys
        sys.path.append('.')
        from core.firebase_client import FirebaseClient
        
        try:
            client = FirebaseClient()
            
            # 檢查最新狀態
            status = client.get_data('latest_modular_status')
            if status:
                print('✅ Firebase最新狀態已更新')
                if 'opportunities' in status:
                    print(f'📈 投資機會數量: {len(status[\"opportunities\"])}')
                if 'last_updated' in status:
                    print(f'📅 最後更新: {status[\"last_updated\"]}')
            else:
                print('⚠️ Firebase狀態未找到')
                
            # 檢查儀表板
            dashboard = client.get_data('dashboard/latest')
            if dashboard:
                print('✅ Firebase儀表板已更新')
            else:
                print('⚠️ Firebase儀表板未找到')
                
        except Exception as e:
            print(f'❌ Firebase驗證失敗: {e}')
        "
        
    - name: 📄 Deploy to GitHub Pages
      if: success()
      run: |
        echo "📄 部署儀表板到GitHub Pages..."
        
        # 檢查是否有index.html文件
        if [ -f "index.html" ]; then
          echo "✅ 發現 index.html 文件"
          echo "📏 文件大小: $(wc -c < index.html) bytes"
          
          # 設定Git配置
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 提交更改
          git add index.html
          git commit -m "🎨 Update ETF dashboard - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No dashboard changes"
          
          # 推送更改
          git push || echo "Push failed, but continuing..."
          
        else
          echo "❌ 未找到 index.html 文件"
          ls -la | grep html || echo "目錄下沒有html文件"
        fi
        
    - name: 📋 Display Analysis Summary
      if: always()
      run: |
        cd scripts
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            from core.firebase_client import FirebaseClient
            client = FirebaseClient()
            
            print('\\n' + '='*60)
            print('🎯 ETF 分析系統執行摘要')
            print('='*60)
            
            # 獲取最新狀態
            status = client.get_data('latest_modular_status')
            if status:
                print(f'📅 最後更新: {status.get(\"last_updated\", \"未知\")}')
                print(f'🎯 系統版本: {status.get(\"system_version\", \"未知\")}')
                
                opportunities = status.get('opportunities', [])
                if opportunities:
                    print(f'\\n📈 投資機會: {len(opportunities)} 個')
                    for opp in opportunities[:3]:  # 顯示前3個
                        print(f'  • {opp.get(\"etf_code\", \"未知\")} - {opp.get(\"action\", \"未知\")} - 信心度: {opp.get(\"confidence\", \"未知\")}')
                else:
                    print('\\n📊 目前無投資機會')
                
                health = status.get('system_health', {})
                if health:
                    print(f'\\n🏥 系統健康度: {health.get(\"score\", \"未知\")}%')
                    
            else:
                print('⚠️ 無法獲取分析狀態')
                
            print('\\n' + '='*60)
            print('✅ 分析完成')
            
        except Exception as e:
            print(f'❌ 摘要顯示失敗: {e}')
        "

name: ETF Daily Analysis - Modular System

on:
  schedule:
    # 每天台灣時間 15:30 執行 (UTC+8 = UTC 07:30)
    - cron: '30 7 * * 1-5'
  workflow_dispatch:
    inputs:
      analysis_mode:
        description: '分析模式'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - dashboard_only

env:
  FIREBASE_URL: ${{ secrets.FIREBASE_URL }}

# 設置Pages部署權限
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  etf-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pandas numpy lxml beautifulsoup4
    
    - name: 🧪 Quick module test
      run: |
        cd scripts
        cat << 'EOF' > quick_test.py
        import sys
        sys.path.append('.')
        
        print("🧪 快速模組測試...")
        
        # 測試關鍵模組
        try:
            from config.etf_config import ETF_INFO, ETF_LIST
            print(f"✅ 配置模組: {len(ETF_INFO)} 個ETF")
        except Exception as e:
            print(f"❌ 配置模組失敗: {e}")
            sys.exit(1)
        
        try:
            from core.firebase_client import FirebaseClient
            print("✅ Firebase客戶端模組")
        except Exception as e:
            print(f"❌ Firebase客戶端失敗: {e}")
            sys.exit(1)
        
        try:
            from core.dividend_collector import DividendDateCollector
            print("✅ 除息收集器模組")
        except Exception as e:
            print(f"❌ 除息收集器失敗: {e}")
            sys.exit(1)
        
        try:
            import main_analyzer
            print("✅ 主分析器模組")
        except Exception as e:
            print(f"❌ 主分析器失敗: {e}")
            sys.exit(1)
        
        print("🎉 所有關鍵模組測試通過!")
        EOF
        python quick_test.py
    
    - name: 🔄 Run main analysis
      if: ${{ github.event.inputs.analysis_mode != 'dashboard_only' }}
      run: |
        cd scripts
        echo "🔄 開始執行主分析程式..."
        timeout 600 python main_analyzer.py || {
          echo "⚠️ 主分析器執行超時或遇到問題"
          echo "這可能是因為數據收集需要較長時間"
          echo "檢查Firebase是否有部分數據更新..."
        }
    
    - name: 🎨 Generate dashboard
      run: |
        cd scripts
        echo "🎨 生成投資策略儀表板..."
        python generate_dashboard.py
    
    - name: 🔍 Verify dashboard creation
      run: |
        if [ -f "index.html" ]; then
          echo "✅ 儀表板文件已創建"
          echo "📏 文件大小: $(wc -c < index.html) bytes"
          echo "📄 文件前100字符:"
          head -c 100 index.html
        else
          echo "❌ 儀表板文件未創建"
          ls -la
          exit 1
        fi
    
    - name: 📊 Setup Pages
      uses: actions/configure-pages@v4
    
    - name: 📤 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
    
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: 🔍 Verify results
      run: |
        cd scripts
        echo "🔍 驗證分析結果..."
        python -c "
        import sys
        sys.path.append('.')
        
        try:
            from core.firebase_client import FirebaseClient
            
            client = FirebaseClient()
            
            # 檢查最新狀態
            latest_status = client.get('latest_modular_status')
            if latest_status:
                print('✅ 找到最新分析狀態')
                print(f'   分析時間: {latest_status.get(\"last_update\", \"Unknown\")}')
                print(f'   系統版本: {latest_status.get(\"system_version\", \"Unknown\")}')
                
                summary = latest_status.get('summary', {})
                print(f'   投資機會: {summary.get(\"total_opportunities\", 0)}')
                print(f'   買進信號: {summary.get(\"buy_signals\", 0)}')
                print(f'   賣出信號: {summary.get(\"sell_signals\", 0)}')
                print(f'   高信心機會: {summary.get(\"high_confidence\", 0)}')
                
            else:
                print('⚠️ 未找到最新分析狀態')
            
            # 檢查儀表板
            dashboard_data = client.get('dashboard/latest')
            if dashboard_data:
                print('✅ 儀表板數據已更新')
                print(f'   生成時間: {dashboard_data.get(\"generated_at\", \"Unknown\")}')
            else:
                print('⚠️ 儀表板數據未找到')
                
        except Exception as e:
            print(f'❌ 結果驗證失敗: {e}')
        "
    
    - name: 📊 Analysis summary
      run: |
        echo ""
        echo "📊 ETF模組化分析系統執行摘要"
        echo "=============================================="
        echo "📅 執行日期: $(date '+%Y-%m-%d')"
        echo "⏰ 執行時間: $(date '+%H:%M:%S')"
        echo "🔧 系統版本: 模組化 v1.0"
        echo "🎯 分析模式: ${{ github.event.inputs.analysis_mode || 'full' }}"
        echo "🌐 GitHub Pages: ${{ steps.deployment.outputs.page_url }}"
        echo ""
        echo "✅ 完成的任務:"
        echo "   - 📦 模組導入測試"
        if [[ "${{ github.event.inputs.analysis_mode }}" != "dashboard_only" ]]; then
          echo "   - 🔄 主分析程式執行"
        fi
        echo "   - 🎨 投資儀表板生成"
        echo "   - 🚀 GitHub Pages部署"
        echo "   - 🔍 結果驗證"
        echo ""
        echo "🎉 ETF模組化分析系統執行完成!"
        echo "=============================================="
    
    - name: 📈 Investment opportunities alert
      if: success()
      run: |
        echo "💰 投資機會提醒:"
        echo "   - 🌐 GitHub Pages: ${{ steps.deployment.outputs.page_url }}"
        echo "   - 📊 Firebase: 查看數據庫儀表板"
        echo "   - 關注高信心度的投資機會"
        echo "   - 請根據風險承受能力調整投資金額"
        echo ""
        echo "⚠️ 風險提醒: 投資有風險，請謹慎決策"
    
    - name: 🚨 Notify if critical issues
      if: failure()
      run: |
        echo "🚨 ETF分析系統執行失敗!"
        echo "請檢查以下可能的問題:"
        echo "1. Firebase連接是否正常"
        echo "2. 證交所API是否可用"
        echo "3. 模組依賴是否完整"
        echo "4. 網路連接是否穩定"
        echo ""
        echo "建議手動執行測試工作流程進行詳細診斷"
